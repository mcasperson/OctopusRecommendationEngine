name: Go Build
'on':
  workflow_dispatch: {}
  push: {}
  pull_request: {}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ^1.17
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: 5.x
      - id: determine_version
        name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.15
        with:
          additionalArguments: /overrideconfig mode=Mainline
      - name: Install Octopus Deploy CLI
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: latest
      - name: Install Dependencies
        run: go get ./...
        shell: bash
      - name: List Dependencies
        run: go list -m all > dependencies.txt
        shell: bash
      - name: Collect Dependencies
        uses: actions/upload-artifact@v2
        with:
          name: Dependencies
          path: dependencies.txt
      - name: List Dependency Updates
        run: go list -u -m -f "{{if .Update}}{{.}}{{end}}" all > dependencyUpdates.txt
        shell: bash
      - name: Collect Dependency Updates
        uses: actions/upload-artifact@v2
        with:
          name: Dependencies Updates
          path: dependencyUpdates.txt
      - name: Clone the Terraform provider source
        run: git clone https://github.com/OctopusDeployLabs/terraform-provider-octopusdeploy.git
        shell: bash
      - name: Build the Terraform provider from source
        run: go build -o terraform-provider-octopusdeploy
        working-directory: terraform-provider-octopusdeploy
      - name: Override the location used by Terraform provider
        run: |-
          cat <<EOT >> ~/.terraformrc
          provider_installation {
              dev_overrides {
              "octopusdeploylabs/octopusdeploy" = "${{ github.workspace }}/terraform-provider-octopusdeploy"
            }
            direct {}
          }
          EOT
      - name: Test
        run: go install gotest.tools/gotestsum@latest; gotestsum --junitfile results.xml -- -timeout 0 -v ./...
        shell: bash
        env:
          # Set this to a base64 encoded Octopus license. It is passed to the Octopus docker image, which requires an
          # encoded license.
          LICENSE: ${{ secrets.LICENSE }}
          # Reuse any Terraform plugins between tests
          TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}
          OCTOTESTDUMPSTATE: !!str true
          OCTOTESTDEFAULTSPACEID: Spaces-2
          TEST_GIT_REPO: ${{ secrets.TEST_GIT_REPO }}
          TEST_GIT_PASSWORD: ${{ secrets.TEST_GIT_PASSWORD }}
          TEST_GIT_USERNAME: ${{ secrets.GIT_CREDENTIAL }}
      - if: always()
        name: Report
        uses: dorny/test-reporter@v1
        with:
          name: Go Tests
          path: results.xml
          reporter: java-junit
          fail-on-error: 'false'
      - run: go build -o octolint_linux_amd64 cmd/octolint.go
        env:
          GOOS: linux
          GOARCH: amd64
      - run: go build -o octolint_windows_amd64.exe cmd/octolint.go
        env:
          GOOS: windows
          GOARCH: amd64
      - run: go build -o octolint_macos_arm64 cmd/octolint.go
        env:
          GOOS: darwin
          GOARCH: arm64
      - id: create_release
        name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.determine_version.outputs.semVer }}+run${{ github.run_number }}-attempt${{ github.run_attempt }}
          release_name: Release ${{ steps.determine_version.outputs.semVer }} Run ${{ github.run_number }} Attempt ${{ github.run_attempt }}
          draft: ${{ 'false' && github.ref == 'refs/heads/main' || 'true' }}
          prerelease: ${{ 'false' && github.ref == 'refs/heads/main' || 'true' }}
      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: octolint_linux_amd64
          asset_name: octolint_linux_amd64
          asset_content_type: application/octet-stream
      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: octolint_windows_amd64.exe
          asset_name: octolint_windows_amd64.exe
          asset_content_type: application/octet-stream
      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: octolint_macos_arm64
          asset_name: octolint_macos_arm64
          asset_content_type: application/octet-stream
permissions:
  id-token: write
  checks: write
  contents: write
